/* 
 * API Title
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse200
    /// </summary>
    [DataContract]
        public partial class InlineResponse200 :  IEquatable<InlineResponse200>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse200" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="recordCode">recordCode.</param>
        /// <param name="recordId">recordId.</param>
        /// <param name="balance">balance.</param>
        /// <param name="nextAccountNumber">nextAccountNumber.</param>
        /// <param name="accountSummaries">accountSummaries.</param>
        public InlineResponse200(string id = default(string), string recordCode = default(string), string recordId = default(string), decimal? balance = default(decimal?), string nextAccountNumber = default(string), List<Object> accountSummaries = default(List<Object>))
        {
            this.Id = id;
            this.RecordCode = recordCode;
            this.RecordId = recordId;
            this.Balance = balance;
            this.NextAccountNumber = nextAccountNumber;
            this.AccountSummaries = accountSummaries;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets RecordCode
        /// </summary>
        [DataMember(Name="recordCode", EmitDefaultValue=false)]
        public string RecordCode { get; set; }

        /// <summary>
        /// Gets or Sets RecordId
        /// </summary>
        [DataMember(Name="recordId", EmitDefaultValue=false)]
        public string RecordId { get; set; }

        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public decimal? Balance { get; set; }

        /// <summary>
        /// Gets or Sets NextAccountNumber
        /// </summary>
        [DataMember(Name="nextAccountNumber", EmitDefaultValue=false)]
        public string NextAccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets AccountSummaries
        /// </summary>
        [DataMember(Name="accountSummaries", EmitDefaultValue=false)]
        public List<Object> AccountSummaries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse200 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RecordCode: ").Append(RecordCode).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  NextAccountNumber: ").Append(NextAccountNumber).Append("\n");
            sb.Append("  AccountSummaries: ").Append(AccountSummaries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse200);
        }

        /// <summary>
        /// Returns true if InlineResponse200 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse200 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse200 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RecordCode == input.RecordCode ||
                    (this.RecordCode != null &&
                    this.RecordCode.Equals(input.RecordCode))
                ) && 
                (
                    this.RecordId == input.RecordId ||
                    (this.RecordId != null &&
                    this.RecordId.Equals(input.RecordId))
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.NextAccountNumber == input.NextAccountNumber ||
                    (this.NextAccountNumber != null &&
                    this.NextAccountNumber.Equals(input.NextAccountNumber))
                ) && 
                (
                    this.AccountSummaries == input.AccountSummaries ||
                    this.AccountSummaries != null &&
                    input.AccountSummaries != null &&
                    this.AccountSummaries.SequenceEqual(input.AccountSummaries)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.RecordCode != null)
                    hashCode = hashCode * 59 + this.RecordCode.GetHashCode();
                if (this.RecordId != null)
                    hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.NextAccountNumber != null)
                    hashCode = hashCode * 59 + this.NextAccountNumber.GetHashCode();
                if (this.AccountSummaries != null)
                    hashCode = hashCode * 59 + this.AccountSummaries.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
