@page "/EditAccounts"

<h3>Add Account</h3>
<form>
    Acount Holder Name
    <input id="AccountHolderName" />

    Amount:
    <input id="AmountToAdd" /> 

</form>
<button @bind="ProcessAddUser">Create Account</button>


<BR><BR><BR><BR>

<!--#####################################################################-->

<h3>Delete User</h3>

<form>
    Select Account:
    <input id="accountSelect" list="accountList" />
    Account to Transfer Funds To: 
    <input id="accountTransferSelect" list="accountList" value="@defaultValue" />
    <datalist id="accountList">
    @foreach (var e in accounts)
    {
        <option value="@e"></option>
    }
    </datalist>

</form>
<button @bind="DeleteAccount">Delete Account</button>

<BR><BR><BR><BR>
<!--#####################################################################-->
<h3>Edit Account</h3>
<form>
    Select Account:
    <input id="accountSelect" list="accountList" />
    <datalist id="accountList">
        @foreach (var e in accounts)
        {
            <option value="@e"></option>
        }
    </datalist>
    New Name:
    <input id="editedName"/>


</form>
<button @bind="EditAccount">Save</button>

<!--#####################################################################-->

@code {

bool isFunds;
List<String> accounts = getAccounts();

string defaultValue = "Troop"; // account for parent holder account 

public async void ProcessAddUser(){

    //call to add user to DB 

}

static List<String> getAccounts(){

    List<String> accountsAPI = new List<string>();

    //something something API GET
    accountsAPI.Add("Test");


    return accountsAPI;
}

public async void DeleteAccount(){

    // if funds associated to account -> transfer
    // remove account from DB
    

}

public async void EditAccount(){

  //update account info
    

}


}
