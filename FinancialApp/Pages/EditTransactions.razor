@page "/EditTransactions"
@inject IJSRuntime JSRuntime
@using System.Net.Http.Json
@using FinancialApp.Data
@using Newtonsoft.Json
@inject HttpClient Http
@inject Microsoft.AspNetCore.Components.NavigationManager navigation
@inject NavigationManager NavigationManager

<h3>New Transaction</h3>


<!--
{
	"fromAccountId": "832b6e42-2234-49a7-a080-c1ed7d385ec9",
	"toAccountId": "05711234-8cff-4a92-853b-07cfd9b603a0",
	"generalAccountId": "7eb2e298-ff90-4e84-ba8d-a13c08aa7302",
	"eventId": "7eb2e298-ff90-4e84-ba8d-a13c08aa7302",
	"dateIncurred": "12/31/2020",
	"description": "New Transaction 23",
	"direction": "credit",
	"amount": 5.00,
	"checkNumber": "",
	"digitalPaymentInfo": "",
	"transactionMethod": "cash"	
}

    -->


@if (listing.GeneralAccountEntries == null)
{
    <div class="spinner-border text-danger" role="status">
        <span class="visually-hidden"></span>
    </div>

}
else
{
    <div class="row">
        <div class="col-md-4">
            <form>
                <div class="form-group">

                    <label asp-for="generalAcccountId" class="control-label">General Account :
                        @selectedGenAcct.AccountName</label>

                    @if (listing.GeneralAccountEntries.Length > 1 && listing.GeneralAccountEntries != null)
                    {
                        <input for="generalAccountId" list="GenAccountSel" class="form-control"
                    placeholder="Select General Account..."
                    @onchange="@((args) => SetGeneralAccount(args.Value.ToString()))" />

                        <datalist id="GenAccountSel">
                            @foreach (var GenAccount in listing.GeneralAccountEntries)
                            {
                                <option value="@GenAccount.Id">@GenAccount.AccountName</option>
                            }
                        </datalist>

                    }
                    else
                    {

                        record.GeneralAccountId = listing.GeneralAccountEntries[0].Id;
                        record.genAccountName = listing.GeneralAccountEntries[0].AccountName;
                    }


                </div>
                <div class="form-group">
                    <label asp-for="dateIncurred" class="control-label">Date Incurred</label>
                    <input for="dateIncurred" class="form-control" type="date" @bind="@record.DateIncurred" />
                </div>
                <div class="form-group">

                    <label asp-for="softAcccountId" class="control-label">Account Transaction : </label>

                    <input for="softAccountId" list="softAccountSel" class="form-control" placeholder="Select Account..."
                    @onchange="@((args) => SetSoftAccount(args.Value.ToString(), false))" />

                    <datalist id="softAccountSel">
                        @foreach (var SoftAccount in selectedGenAcct.SoftAccountList)
                        {
                            <option value="@SoftAccount.Id">@SoftAccount.AccountName</option>
                        }
                    </datalist>
                </div>
                <div class="form-group">
                    <SelectSearch
                                    SelectSearchLabel="Event" 
                                    Items="@eventEntries"
                                    @bind-SelectedItemKey="record.EventId">
                    </SelectSearch>
    
                </div>

                <div class="form-group">
                    <label asp-for="direction" class="control-label">Direction: @record.Direction </label>
                    <EditForm Model="@record">
                        <InputRadioGroup @bind-Value="record.Direction">
                            @foreach (var item in Enum.GetValues(typeof(DebitCreditType)))
                            {
                                <label for="@item" class="control-label">@item</label>
                                <InputRadio Value="@item" class="custom-radio" id="@item" />

                            }
                        </InputRadioGroup>
                    </EditForm>
                </div>

               <div class="container">
                   <div class="row align-items-start">
                       <div class="col-md-6">
                            <div class="form-group">
                                <label asp-for="transactionMethod" class="control-label">Transaction Method: @record.TransactionMethod</label>

                                <div class="list-group">
                                    
                                    <EditForm Model="@record">
                                        <InputRadioGroup @bind-Value="record.TransactionMethod" id="transactionMethod" >
                                            @foreach (var item in Enum.GetValues(typeof(TransactionType)))
                                            {   
                                                <label for="@item" class="list-group-item list-group-item-action">
                                                <div class="custom-control custom-radio custom-control-inline">  
                                                    
                                                    <InputRadio Value="@item" id="@item" class="custom-control-input" visable="false"/>
                                                    @item
                                                
                                                </div>
                                                </label>

                                            }
                                        </InputRadioGroup>
                                    </EditForm>
                                </div>
                            </div>
                        </div>

                    
                        <div class="col-md-6 offset-md-7">
                            @if (record.TransactionMethod == (TransactionType)TransactionType.Transfer)
                                {
                                    <div class="form-group-">

                                        <label asp-for="softAcccountId" class="control-label">Account to Tansfer To : </label>

                                        <input for="softAccountId" list="softAccountSel" class="form-control" placeholder="Select Account..."
                                    @onchange="@((args) => SetSoftAccount(args.Value.ToString(), true))" />

                                        <datalist id="softAccountSel">
                                            @foreach (var SoftAccount in selectedGenAcct.SoftAccountList)
                                            {
                                                <option value="@SoftAccount.Id">@SoftAccount.AccountName</option>
                                            }
                                        </datalist>
                                    </div>

                                }
                        </div>
                    </div>
                </div>         

                <div class="form-group">
                    <label asp-for="amount" class="control-label">Amount</label>
                    <input type="number" for="amount" class="form-control" @bind="@record.Amount" placeholder="0.00" />
                </div>

                <div class="form-group">
                    <label asp-for="description" class="control-label">Description</label>
                    <input for="description" class="form-control" @bind="@record.Description" />
                </div>
            </form>

            <button @onclick="@(async () => ProcessClick())" class="btn btn-default">Save</button>
            <button @onclick="@cancel" class="btn">Cancel</button>

        </div>
    </div>
}




@code {

    public Transaction record = new Transaction { DateIncurred = DateTime.Today };

    public Entry submission = new Entry();
    int radioSelectCode = 1;
    private GeneralAccountEntry selectedGenAcct = new GeneralAccountEntry();
    private AccountEntry selectedSoftAcct = new AccountEntry();
    public ListingsResponse listing = new ListingsResponse();
    public EventEntry[] eventEntries ;


    protected override async Task OnInitializedAsync()
    {
        HttpResponseMessage response = await Http.GetAsync("http://localhost:7071/api/listings");
        string responseBody = await response.Content.ReadAsStringAsync();
        listing = JsonConvert.DeserializeObject<ListingsResponse>(responseBody);

        selectedGenAcct = listing.GeneralAccountEntries[0];
        eventEntries= listing.EventEntries;
        foreach(var x in eventEntries){
            Console.WriteLine(x.GetName());
        }
    }

    public async void ProcessClick()
    {

        if (record.DateIncurred > DateTime.Today)
        {
            await JSRuntime.InvokeAsync<bool>("alert", "Cannot submit date in future");
            return;
        }

        


        string output = "The following data has been submitted: \r\nDate: " + record.DateIncurred.ToString("MM/dd/yyyy")
        + "\nName: " + submission.FirstName
        + "\nEvent: " + submission.Event
        + "\nAmount: " + record.Amount
        + "\nID: " + record.Id;

        if (await JSRuntime.InvokeAsync<bool>("confirm", output))
        {
            Console.WriteLine("adding");
            
            SaveTransaction();
        }

    }

    public void SaveTransaction()
    {
        Http.PutAsJsonAsync("http://localhost:7071/api/transaction", record);
        //navigation.NavigateTo("/transactions");
    }

    void cancel()
    {
        //navigation.NavigateTo("/transactions");
    }


    public void SetGeneralAccount(String selectedID)
    {

        foreach (GeneralAccountEntry GenAccount in listing.GeneralAccountEntries)
        {
            if (GenAccount.Id == selectedID)
            {
                selectedGenAcct = GenAccount;
                record.GeneralAccountId = GenAccount.Id;
            }
        }



    }
    public void SetSoftAccount(String selectedID, bool trans)
    {

        foreach (AccountEntry softAccount in selectedGenAcct.SoftAccountList)
        {
            if (softAccount.Id == selectedID)
            {
                selectedSoftAcct = softAccount;

            }
        }

        if (trans)
        {
            record.FromAccountId = selectedSoftAcct.Id;

        }
        else
        {
            record.ToAccountId = selectedSoftAcct.Id;
        }


    }


}