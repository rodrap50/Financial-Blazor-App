@page "/EditTransactions"
@inject IJSRuntime JSRuntime
@using System.Net.Http.Json
@using FinancialApp.Data
@using Newtonsoft.Json
@inject HttpClient Http
@inject Microsoft.AspNetCore.Components.NavigationManager navigation

<h3>New Transaction</h3>


<!--
{
	"fromAccountId": "832b6e42-2234-49a7-a080-c1ed7d385ec9",
	"toAccountId": "05711234-8cff-4a92-853b-07cfd9b603a0",
	"generalAccountId": "7eb2e298-ff90-4e84-ba8d-a13c08aa7302",
	"eventId": "7eb2e298-ff90-4e84-ba8d-a13c08aa7302",
	"dateIncurred": "12/31/2020",
	"description": "New Transaction 23",
	"direction": "credit",
	"amount": 5.00,
	"checkNumber": "",
	"digitalPaymentInfo": "",
	"transactionMethod": "cash"	
}

    -->


@if (record == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div class="row">
    <div class="col-md-4">
        <form>
             <div class="form-group">
                <label asp-for="generalAcccountId" class="control-label">General Account Id</label>
                <input for="generalAccountId" class="form-control" @bind="@record.GeneralAccountId" />
            </div>
            <div class="form-group">
                <label asp-for="dateIncurred" class="control-label">Date Incurred</label>
                <input for="dateIncurred" class="form-control" type="date" @bind="@record.DateIncurred" />
            </div>
            <div class="form-group">
                <label asp-for="description" class="control-label">Description</label>
                <input for="description" class="form-control" @bind="@record.Description" />
            </div>
            <div class="form-group">
                <label asp-for="direction" class="control-label">Direction</label>
                <input for="direction" class="form-control" @bind="@record.Direction" />
            </div>
            <div class="form-group">
                <label asp-for="amount" class="control-label">Amount</label>
                <input for="amount" class="form-control" @bind="@record.Amount" />
            </div>
            <div class="form-group">
                <label asp-for="transactionMethod" class="control-label">Transaction Method</label>
                <input for="transactionMethod" class="form-control" @bind="@record.TransactionMethod" />
            </div>
        </form>
        
        <button @onclick="@(async () => await SaveTransaction())" class="btn btn-default">Save</button>
        <button @onclick="@cancel" class="btn">Cancel</button>
        
    </div>
</div>
}

@code {
    public Transaction record = new Transaction();
    private AccountListing accounts;
    
    public Entry submission = new Entry();
    protected override async Task OnInitializedAsync()
    {
        HttpResponseMessage response = await Http.GetAsync("http://localhost:7071/api/accounts");
        string responseBody = await response.Content.ReadAsStringAsync();
        accounts = JsonConvert.DeserializeObject<AccountListing>(responseBody);

       // getGeneralAccount();


    }
    
    public async void ProcessClick()
    {
        
        if (submission.SubmissionDate > DateTime.Today)
        {
            await JSRuntime.InvokeAsync<bool>("alert", "Cannot submit date in future");
            return;
        }

        record.Amount = submission.Amount;


        string output = "The following data has been submitted: \r\nDate: " + submission.SubmissionDate.Date.ToString("MM/dd/yyyy")
                        + "\nName: " + submission.FirstName
                        + "\nEvent: " + submission.Event
                        + "\nAmount: " + record.Amount
                        + "\nID:    " + record.Id;

        if(await JSRuntime.InvokeAsync<bool>("confirm", output))
        {   
            Console.WriteLine("adding");
            SaveTransaction();
        }

    }   

    protected async Task SaveTransaction()
    {
        await Http.PutAsJsonAsync("http://localhost:7071/api/transaction", record);
        //navigation.NavigateTo("/transactions");
    }

    void cancel()
    {
        //navigation.NavigateTo("/transactions");
    }

    
    public void getGeneralAccount() 
    {

        foreach (var _account in accounts.AccountSummaries)
        {
            if(! _account.softAccount)
            {
                record.GeneralAccountId = _account.GeneralAccountId;
                return;
            }
        }
        return;
    }
    
}